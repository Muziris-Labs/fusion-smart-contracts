{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.24\"},\"sources\":{\"contracts/proxies/FusionProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./FusionProxy.sol\\\";\\nimport \\\"../external/FusionContext.sol\\\";\\nimport \\\"../base/Verifier.sol\\\";\\nimport \\\"../libraries/Conversion.sol\\\";\\nimport \\\"../interfaces/IFusion.sol\\\";\\nimport \\\"../libraries/Conversion.sol\\\";\\n\\n/**\\n * @title Fusion Proxy Factory - Allows to create a new proxy contract and execute a message call to the new proxy within one transaction.\\n * @author Anoy Roy Chowdhury - <anoy@valerium.id>\\n */\\n\\ncontract FusionProxyFactory {\\n    event ProxyCreation(FusionProxy indexed proxy, address singleton);\\n\\n    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\\n    function proxyCreationCode() public pure returns (bytes memory) {\\n        return type(FusionProxy).creationCode;\\n    }\\n\\n    /**\\n     * @notice Internal method to create a new proxy contract using CREATE2.\\n     * @param Singleton Address of the singleton contract.\\n     * @param TxHash The common public input for proof verification.\\n     * @param TxVerifier Address of the TxVerifier contract.\\n     * @param TxHash The common public input for proof verification.\\n     * @param salt Create2 salt to use for calculating the address of the new proxy contract.\\n     * @param to Contract address for optional delegate call.\\n     * @param data Data payload for optional delegate call.\\n     * @return proxy Address of the new proxy contract.\\n     */\\n    function deployProxy(\\n        address Singleton,\\n        bytes32 TxHash,\\n        address TxVerifier,\\n        bytes32 salt,\\n        address to,\\n        bytes calldata data\\n    ) internal returns (FusionProxy proxy) {\\n        require(isContract(Singleton), \\\"Singleton contract not deployed\\\");\\n\\n        bytes memory deploymentData = abi.encodePacked(\\n            type(FusionProxy).creationCode,\\n            uint256(uint160(Singleton))\\n        );\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            proxy := create2(\\n                0x0,\\n                add(0x20, deploymentData),\\n                mload(deploymentData),\\n                salt\\n            )\\n        }\\n        require(address(proxy) != address(0), \\\"Create2 call failed\\\");\\n\\n        bytes memory initializer = getInitializer(TxVerifier, TxHash, to, data);\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            if eq(\\n                call(\\n                    gas(),\\n                    proxy,\\n                    0,\\n                    add(initializer, 0x20),\\n                    mload(initializer),\\n                    0,\\n                    0\\n                ),\\n                0\\n            ) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Deploys a new proxy with the current singleton.\\n     * @param RegistryData Data payload for the registry.\\n     * @param to Contract address for optional delegate call.\\n     * @param data Data payload for optional delegate call.\\n     */\\n    function createProxyWithTxHash(\\n        bytes calldata RegistryData,\\n        address to,\\n        bytes calldata data\\n    ) public returns (FusionProxy proxy) {\\n        (address Singleton, bytes32 TxHash, address _txVerifier) = abi.decode(\\n            RegistryData,\\n            (address, bytes32, address)\\n        );\\n\\n        proxy = _createProxyWithTxHash(\\n            Singleton,\\n            TxHash,\\n            _txVerifier,\\n            to,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice Deploys a new proxy with `_singleton` singleton.\\n     * @param _singleton Address of the singleton contract.\\n     * @param _txHash The common public input for proof verification.\\n     * @param _txVerifier Address of the TxVerifier contract.\\n     * @param to Contract address for optional delegate call.\\n     * @param data Data payload for optional delegate call.\\n     * @dev The domain name is used to calculate the salt for the CREATE2 call.\\n     */\\n    function _createProxyWithTxHash(\\n        address _singleton,\\n        bytes32 _txHash,\\n        address _txVerifier,\\n        address to,\\n        bytes calldata data\\n    ) internal returns (FusionProxy proxy) {\\n        // If the domain changes the proxy address should change too.\\n        bytes32 salt = keccak256(abi.encodePacked(_txHash, _txVerifier));\\n\\n        proxy = deployProxy(_singleton, _txHash, _txVerifier, salt, to, data);\\n\\n        emit ProxyCreation(proxy, _singleton);\\n    }\\n\\n    /**\\n     * @notice Returns true if `account` is a contract.\\n     * @dev This function will return false if invoked during the constructor of a contract,\\n     *      as the code is not actually created until after the constructor finishes.\\n     * @param account The address being queried\\n     * @return True if `account` is a contract\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @notice Returns the initializer for the Fusion contract.\\n     * @param _txVerifier  The address of the TxVerifier contract.\\n     * @param _txHash The common public input for proof verification.\\n     * @param _to Contract address for optional delegate call.\\n     * @param _data Data payload for optional delegate call.\\n     */\\n    function getInitializer(\\n        address _txVerifier,\\n        bytes32 _txHash,\\n        address _to,\\n        bytes calldata _data\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodeWithSelector(\\n                IFusion.setupFusion.selector,\\n                _txVerifier,\\n                _txHash,\\n                _to,\\n                _data\\n            );\\n    }\\n}\\n\",\"versionPragma\":\">=0.7.0 <0.9.0\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/external/FusionContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev FusionContext - A contract that charges fees for the transaction.\\n * @author Anoy Roy Chowdhury - <anoy@valerium.id>\\n */\\n\\nabstract contract FusionContext {\\n    /**\\n     * @notice Charges the fees for the transaction.\\n     * @param startGas Gas used before calling the function\\n     * @param gasPrice gas price of the transaction\\n     * @param baseGas base gas deducted by the relayer\\n     * @param GasTank address of the GasTank\\n     * @param token address of the token\\n     */\\n    function chargeFees(\\n        uint256 startGas,\\n        uint256 gasPrice,\\n        uint256 baseGas,\\n        address GasTank,\\n        address token\\n    ) internal {\\n        uint256 gasUsed = startGas - gasleft();\\n        uint256 gasFee = (gasUsed + baseGas) * gasPrice;\\n\\n        if (token != address(0)) {\\n            uint8 decimals = IERC20Metadata(token).decimals();\\n            uint256 transferAmount = gasFee / 10 ** (18 - decimals);\\n\\n            // Low-level call with additional check for tokens without return value\\n            (bool success, bytes memory data) = token.call(\\n                abi.encodeWithSelector(\\n                    IERC20.transfer.selector,\\n                    GasTank,\\n                    transferAmount\\n                )\\n            );\\n\\n            bool transferSucceeded = success &&\\n                (data.length == 0 || abi.decode(data, (bool)));\\n\\n            if (!transferSucceeded) {\\n                revert(\\\"Fusion: fee transfer failed\\\");\\n            }\\n        } else {\\n            (bool success, ) = GasTank.call{value: gasFee}(\\\"\\\");\\n            if (!success) {\\n                revert(\\\"Fusion: fee transfer failed\\\");\\n            }\\n        }\\n    }\\n}\\n\",\"versionPragma\":\">=0.7.0 <0.9.0\"},\"contracts/base/Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title UltraVerifierInterface - Interface for verification of proofs\\n * @author Anoy Roy Chowdhury - <anoy@valerium.id>\\n * @notice This Interface is used to verify proofs using UltraVerifier\\n */\\ninterface UltraVerifierInterface {\\n    function verify(\\n        bytes calldata _proof,\\n        bytes32[] calldata _publicInputs\\n    ) external view returns (bool);\\n}\\n\\n/**\\n * @title Verifier - Base contract for verification of proofs\\n * @dev This contract is used to verify proofs using UltraVerifier\\n */\\nabstract contract Verifier {\\n    /**\\n     * @notice Verifies the proof and returns the result of verification.\\n     * @param _proof The proof inputs\\n     * @param _publicInputs The public inputs\\n     * @param _verifier The address of the verifier contract\\n     */\\n    function verifyProof(\\n        bytes calldata _proof,\\n        bytes32[] memory _publicInputs,\\n        address _verifier\\n    ) internal view returns (bool) {\\n        return UltraVerifierInterface(_verifier).verify(_proof, _publicInputs);\\n    }\\n}\\n\",\"versionPragma\":\">=0.7.0 <0.9.0\"},\"contracts/libraries/Conversion.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Conversion - A contract that can convert to publicInputs compatible with UltraVerifier\\n * @notice This contract is a library that provides functions to convert between different types\\n * @author Anoy Roy Chowdhury - <anoy@valerium.id>\\n */\\n\\nlibrary Conversion {\\n    /**\\n     * @notice Convert a bytes32 value to a padded bytes32 value\\n     * @param value The value to be converted to bytes32\\n     */\\n    function convertToPaddedByte32(\\n        bytes32 value\\n    ) internal pure returns (bytes32) {\\n        bytes32 paddedValue;\\n        paddedValue = bytes32(uint256(value) >> (31 * 8));\\n        return paddedValue;\\n    }\\n\\n    /**\\n     * @notice Convert the message hash to public inputs\\n     * @param _message  The message hash\\n     * @param _hash  The hash of the user that verifies the proof\\n     */\\n    function convertToInputs(\\n        bytes32 _message,\\n        bytes32 _hash\\n    ) internal pure returns (bytes32[] memory) {\\n        bytes32[] memory byte32Inputs = new bytes32[](33);\\n        bytes32 messageHash = getEthSignedMessageHash(_message);\\n        for (uint256 i = 0; i < 32; i++) {\\n            byte32Inputs[i] = convertToPaddedByte32(messageHash[i]);\\n        }\\n        byte32Inputs[32] = _hash;\\n\\n        return byte32Inputs;\\n    }\\n\\n    /**\\n     * @notice Get the hash of a message that was signed\\n     * @param _messageHash The hash of the message that was signed\\n     */\\n    function getEthSignedMessageHash(\\n        bytes32 _messageHash\\n    ) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    _messageHash\\n                )\\n            );\\n    }\\n}\\n\",\"versionPragma\":\">=0.7.0 <0.9.0\"},\"contracts/libraries/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Fusion contracts.\\n * @author Anoy Roy Chowdhury - <anoy@valerium.id>\\n */\\nlibrary Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\",\"versionPragma\":\">=0.7.0 <0.9.0\"},\"contracts/libraries/Transaction.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"./Enum.sol\\\";\\n\\n/**\\n * @title Transaction - Library for handling transactions in Fusion Wallet\\n * @author Anoy Roy Chowdhury - <anoy@valerium.id>\\n */\\nlibrary Transaction {\\n    struct TransactionData {\\n        address to;\\n        uint256 value;\\n        bytes data;\\n        Enum.Operation operation;\\n        uint256 gasLimit;\\n    }\\n\\n    /**\\n     * @notice Encode the transaction data with nonce\\n     * @param _tx  The transaction data\\n     * @param _nonce The nonce of the Fusion Wallet\\n     * @param _chainId The chain id of the network\\n     * @param _token The token address\\n     * @param _gasPrice The gas price\\n     * @param _baseGas The base gas\\n     */\\n    function encodeWithNonce(\\n        TransactionData memory _tx,\\n        uint256 _nonce,\\n        uint256 _chainId,\\n        address _token,\\n        uint256 _gasPrice,\\n        uint256 _baseGas,\\n        uint48 _deadline\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encode(\\n                _tx.to,\\n                _tx.value,\\n                _tx.data,\\n                uint8(_tx.operation),\\n                _nonce,\\n                _chainId,\\n                _token,\\n                _gasPrice,\\n                _baseGas,\\n                _deadline,\\n                _tx.gasLimit\\n            );\\n    }\\n\\n    /**\\n     * @notice Get the hash of a transaction\\n     * @param _tx  The transaction data\\n     * @param _nonce  The nonce of the Fusion Wallet\\n     * @param _chainId  The chain id of the network\\n     * @param _token The token address\\n     * @param _gasPrice The gas price\\n     * @param _baseGas The base gas\\n     */\\n    function getTxHash(\\n        TransactionData memory _tx,\\n        uint256 _nonce,\\n        uint256 _chainId,\\n        address _token,\\n        uint256 _gasPrice,\\n        uint256 _baseGas,\\n        uint48 _deadline\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                encodeWithNonce(\\n                    _tx,\\n                    _nonce,\\n                    _chainId,\\n                    _token,\\n                    _gasPrice,\\n                    _baseGas,\\n                    _deadline\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Get the hash of a batch of transactions\\n     * @param _txs All the transactions in the batch\\n     * @param _nonce The nonce of the Fusion Wallet\\n     * @param _chainId The chain id of the network\\n     * @param _token The token address\\n     * @param _gasPrice The gas price\\n     * @param _baseGas The base gas\\n     */\\n    function getTxBatchHash(\\n        TransactionData[] memory _txs,\\n        uint256 _nonce,\\n        uint256 _chainId,\\n        address _token,\\n        uint256 _gasPrice,\\n        uint256 _baseGas,\\n        uint48 _deadline\\n    ) internal pure returns (bytes32) {\\n        bytes memory txsData;\\n        for (uint256 i = 0; i < _txs.length; i++) {\\n            txsData = abi.encodePacked(\\n                txsData,\\n                encodeWithNonce(\\n                    _txs[i],\\n                    _nonce,\\n                    _chainId,\\n                    _token,\\n                    _gasPrice,\\n                    _baseGas,\\n                    _deadline\\n                )\\n            );\\n        }\\n        return keccak256(txsData);\\n    }\\n}\\n\",\"versionPragma\":\">=0.7.0 <0.9.0\"},\"contracts/libraries/Quote.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Quote - Collection of structs used in Fusion gas quotes.\\n * @author Anoy Roy Chowdhury - <anoy@valerium.id>\\n */\\nlibrary Quote {\\n    // GasQuote struct\\n    struct GasQuote {\\n        address token;\\n        uint256 gasPrice;\\n        uint256 baseGas;\\n        uint256 estimatedFees;\\n        address gasRecipient;\\n        uint48 deadline;\\n    }\\n}\\n\",\"versionPragma\":\">=0.7.0 <0.9.0\"},\"contracts/interfaces/IFusion.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {Enum} from \\\"../libraries/Enum.sol\\\";\\nimport {Transaction} from \\\"../libraries/Transaction.sol\\\";\\nimport {Quote} from \\\"../libraries/Quote.sol\\\";\\n\\n/**\\n * @title IFusion - Fusion Wallet Interface\\n * @author Anoy Roy Chowdhury - <anoyroyc3545@gmail.com>\\n */\\n\\ninterface IFusion {\\n    event SetupFusion(address txVerifier, bytes32 txHash);\\n\\n    /**\\n     * @notice Initializes the Fusion Wallet\\n     * @param _txVerifier The address of the Noir based ZK-SNARK verifier contract\\n     * @param _txHash The hash used as a public inputs for verifiers\\n     * @param to The destination address of the call to execute\\n     * @param data The data of the call to\\n     */\\n    function setupFusion(\\n        address _txVerifier,\\n        bytes32 _txHash,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Executes a transaction\\n     * @param _proof The zk-SNARK proof\\n     * @param txData call to perform\\n     */\\n    function executeTx(\\n        bytes calldata _proof,\\n        Transaction.TransactionData calldata txData\\n    ) external payable returns (bool success);\\n\\n    /**\\n     * @notice Executes a batch of transactions\\n     * @param _proof The zk-SNARK proof\\n     * @param transactions Array of Transaction objects\\n     */\\n    function executeBatchTx(\\n        bytes calldata _proof,\\n        Transaction.TransactionData[] calldata transactions\\n    ) external payable;\\n\\n    /**\\n     * @notice Executes a transaction with a trusted forwarder\\n     * @param _proof The zk-SNARK proof\\n     * @param txData call to perform\\n     * @param quote The gas quote\\n     */\\n    function executeTxWithProvider(\\n        bytes calldata _proof,\\n        Transaction.TransactionData calldata txData,\\n        Quote.GasQuote calldata quote\\n    ) external payable;\\n\\n    /**\\n     * @notice Executes a batch of transactions with a trusted forwarder\\n     * @param _proof The zk-SNARK proof\\n     * @param transactions Array of Transaction objects\\n     * @param quote The gas quote\\n     */\\n    function executeBatchTxWithProvider(\\n        bytes calldata _proof,\\n        Transaction.TransactionData[] calldata transactions,\\n        Quote.GasQuote calldata quote\\n    ) external payable;\\n\\n    /**\\n     * @notice Verifies if the proof is valid or not\\n     * @param _hash the message which is used to verify zero-knowledge proof\\n     * @param _signature Noir based zero-knowledge proof\\n     * @return magicValue The magic value indicating if the signature is valid\\n     */\\n    function isValidSignature(\\n        bytes32 _hash,\\n        bytes calldata _signature\\n    ) external view returns (bytes4 magicValue);\\n\\n    /**\\n     * @notice Returns the nonce of the Fusion Wallet\\n     * @return The current nonce value\\n     */\\n    function getNonce() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the version of the contract\\n     * @return The version string\\n     */\\n    function VERSION() external view returns (string memory);\\n\\n    /**\\n     * @notice Returns the address of the transaction verifier\\n     * @return The address of the verifier contract\\n     */\\n    function TxVerifier() external view returns (address);\\n\\n    /**\\n     * @notice Returns the transaction hash used as public input\\n     * @return The transaction hash\\n     */\\n    function TxHash() external view returns (bytes32);\\n}\\n\",\"versionPragma\":\">=0.7.0 <0.9.0\"},\"contracts/proxies/FusionProxy.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title IProxy - Helper interface to access the singleton address of the Proxy on-chain.\\n * @author Richard Meissner - <richard@gnosis.io>\\n */\\ninterface IProxy {\\n    function masterCopy() external view returns (address);\\n}\\n\\n/**\\n * @title FusionProxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\\n * @author Stefan George - <stefan@gnosis.io>\\n * @author Richard Meissner - <richard@gnosis.io>\\n * @author Anoy Roy Chowdhury - <anoy@valerium.id>\\n */\\ncontract FusionProxy {\\n    // Singleton always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\\n    address internal singleton;\\n\\n    /**\\n     * @notice Constructor function sets address of singleton contract.\\n     * @param _singleton Singleton address.\\n     */\\n    constructor(address _singleton) {\\n        require(_singleton != address(0), \\\"Invalid singleton address provided\\\");\\n        singleton = _singleton;\\n    }\\n\\n    /// @dev Fallback function forwards all transactions and returns all received return data.\\n    fallback() external payable {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let _singleton := and(\\n                sload(0),\\n                0xffffffffffffffffffffffffffffffffffffffff\\n            )\\n            // 0xa619486e == keccak(\\\"masterCopy()\\\"). The value is right padded to 32-bytes with 0s\\n            if eq(\\n                calldataload(0),\\n                0xa619486e00000000000000000000000000000000000000000000000000000000\\n            ) {\\n                mstore(0, _singleton)\\n                return(0, 0x20)\\n            }\\n            calldatacopy(0, 0, calldatasize())\\n            let success := delegatecall(\\n                gas(),\\n                _singleton,\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            returndatacopy(0, 0, returndatasize())\\n            if eq(success, 0) {\\n                revert(0, returndatasize())\\n            }\\n            return(0, returndatasize())\\n        }\\n    }\\n}\\n\",\"versionPragma\":\">=0.7.0 <0.9.0\"}}}","address":"0x28d38B78809520f7a9c78bD4f04426FF07C4C9b2","bytecode":"0x60806040523461001a5760405161098f610020823961098f90f35b600080fdfe608060405260043610156200001357600080fd5b60003560e01c806353e5d93514620000365763d1d34a8a0362000048576200020f565b620000c5565b60009103126200004857565b600080fd5b60005b838110620000615750506000910152565b818101518382015260200162000050565b62000097620000a1602093620000ab936200008b815190565b80835293849260200190565b958691016200004d565b601f01601f191690565b0190565b6020808252620000c29291019062000072565b90565b346200004857620000d83660046200003c565b620000f3620000e662000297565b60405191829182620000af565b0390f35b909182601f83011215620000485781359167ffffffffffffffff8311620000485760200192600183028401116200004857565b6001600160a01b031690565b6001600160a01b0381165b036200004857565b90503590620001588262000136565b565b91906060838203126200004857823567ffffffffffffffff811162000048578162000187918501620000f7565b92909362000199836020830162000149565b92604082013567ffffffffffffffff81116200004857620001bb9201620000f7565b9091565b6200012a620000c2620000c2926001600160a01b031690565b620000c290620001bf565b620000c290620001d8565b620001f990620001e3565b9052565b602081019291620001589190620001ee565b346200004857620000f3620002346200022a3660046200015a565b9392909262000305565b60405191829182620001fd565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff8211176200027a57604052565b62000241565b90620001586200028f60405190565b928362000257565b610259620002a86020820162000280565b9080825262000701602083013990565b8062000141565b905035906200015882620002b8565b90916060828403126200004857620000c2620002eb848462000149565b936040620002fd8260208701620002bf565b940162000149565b620003386200032d6200033f92620000c29796959462000323600090565b50810190620002ce565b9391929092620001e3565b92620001e3565b9162000363565b620001f9906001600160a01b031660601b90565b01809262000346565b95949290620003c8949262000376600090565b50604051620003ab81602081016200039e8587836020816200035a620000ab93601496959052565b9081038252038262000257565b620003bf620003b8825190565b9160200190565b2091886200052b565b917f4f51faf6c4561ff95f067657e43439f0f856d97c04d9ec9070a6199ad418e2356200041b620003f985620001e3565b926200040460405190565b918291826001600160a01b03909116815260200190565b0390a2565b156200042857565b60405162461bcd60e51b815260206004820152601f60248201527f53696e676c65746f6e20636f6e7472616374206e6f74206465706c6f796564006044820152606490fd5b620000c2620000c2620000c2926001600160a01b031690565b620000ab620004a1926020926200049b815190565b94859290565b938491016200004d565b620004be620000ab916020949362000486565b918252565b6200012a620000c2620000c29290565b620000c290620004c3565b15620004e657565b60405162461bcd60e51b815260206004820152601360248201527f437265617465322063616c6c206661696c6564000000000000000000000000006044820152606490fd5b95620005f7936200039e620005b0620005fd94989a999795976200054d600090565b50620005636200055d8262000623565b62000420565b6200059662000590610259926200057d6020850162000280565b93808552620007016020860139620001d8565b6200046d565b90620005a160405190565b938492602084019283620004ab565b8051906020016000f597620005c589620001e3565b93600097889788978897620005ef620005e26200012a8b620004d3565b916001600160a01b031690565b1415620004de565b620006bc565b60208151910182885af114620006105750565b80fd5b620000c2620000c2620000c29290565b3b6200063862000634600062000613565b9190565b1190565b90826000939282370152565b9190620000a1816200066281620000ab9560209181520190565b80956200063c565b909391620000c295936200069e620006ae9262000697608086019860008701906001600160a01b03169052565b6020850152565b6001600160a01b03166040830152565b606081850391015262000648565b9193620000c293620006f09295620006d2606090565b5060405163e4d52aa760e01b6020820152968795602487016200066a565b602082018103825203826200025756fe608060405234610028576100196100146100c0565b6101a1565b604051608b6101ce8239608b90f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b0382111761006457604052565b61002d565b9061007d61007660405190565b9283610043565b565b6001600160a01b031690565b90565b6001600160a01b0381160361002857565b9050519061007d8261008e565b906020828203126100285761008b9161009f565b61008b610259803803806100d381610069565b9283398101906100ac565b61007f61008b61008b9290565b61008b906100de565b156100fb57565b60405162461bcd60e51b815260206004820152602260248201527f496e76616c69642073696e676c65746f6e20616464726573732070726f766964604482015261195960f21b6064820152608490fd5b61008b9061007f906001600160a01b031682565b61008b9061014b565b61008b9061015f565b9061018161008b61019d92610168565b82546001600160a01b0319166001600160a01b03919091161790565b9055565b61007d906101c66101b561007f60006100eb565b6001600160a01b03831614156100f4565b600061017156fe60806040526000805473ffffffffffffffffffffffffffffffffffffffff16903563530ca43760e11b14604c576000808092368280378136915af43d82803e146047573d6000f35b3d6000fd5b60005260206000f3fea264697066735822122080910b9407e55bea2fc5c4480d166cebd732618c84af8d8238f8c4ccc7d9955764736f6c63430008180033a2646970667358221220a7e4947857ef61a221b7336525f9f87bd79af5d7c03a1e1974802101603f37e364736f6c63430008180033","deployedBytecode":"0x608060405260043610156200001357600080fd5b60003560e01c806353e5d93514620000365763d1d34a8a0362000048576200020f565b620000c5565b60009103126200004857565b600080fd5b60005b838110620000615750506000910152565b818101518382015260200162000050565b62000097620000a1602093620000ab936200008b815190565b80835293849260200190565b958691016200004d565b601f01601f191690565b0190565b6020808252620000c29291019062000072565b90565b346200004857620000d83660046200003c565b620000f3620000e662000297565b60405191829182620000af565b0390f35b909182601f83011215620000485781359167ffffffffffffffff8311620000485760200192600183028401116200004857565b6001600160a01b031690565b6001600160a01b0381165b036200004857565b90503590620001588262000136565b565b91906060838203126200004857823567ffffffffffffffff811162000048578162000187918501620000f7565b92909362000199836020830162000149565b92604082013567ffffffffffffffff81116200004857620001bb9201620000f7565b9091565b6200012a620000c2620000c2926001600160a01b031690565b620000c290620001bf565b620000c290620001d8565b620001f990620001e3565b9052565b602081019291620001589190620001ee565b346200004857620000f3620002346200022a3660046200015a565b9392909262000305565b60405191829182620001fd565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff8211176200027a57604052565b62000241565b90620001586200028f60405190565b928362000257565b610259620002a86020820162000280565b9080825262000701602083013990565b8062000141565b905035906200015882620002b8565b90916060828403126200004857620000c2620002eb848462000149565b936040620002fd8260208701620002bf565b940162000149565b620003386200032d6200033f92620000c29796959462000323600090565b50810190620002ce565b9391929092620001e3565b92620001e3565b9162000363565b620001f9906001600160a01b031660601b90565b01809262000346565b95949290620003c8949262000376600090565b50604051620003ab81602081016200039e8587836020816200035a620000ab93601496959052565b9081038252038262000257565b620003bf620003b8825190565b9160200190565b2091886200052b565b917f4f51faf6c4561ff95f067657e43439f0f856d97c04d9ec9070a6199ad418e2356200041b620003f985620001e3565b926200040460405190565b918291826001600160a01b03909116815260200190565b0390a2565b156200042857565b60405162461bcd60e51b815260206004820152601f60248201527f53696e676c65746f6e20636f6e7472616374206e6f74206465706c6f796564006044820152606490fd5b620000c2620000c2620000c2926001600160a01b031690565b620000ab620004a1926020926200049b815190565b94859290565b938491016200004d565b620004be620000ab916020949362000486565b918252565b6200012a620000c2620000c29290565b620000c290620004c3565b15620004e657565b60405162461bcd60e51b815260206004820152601360248201527f437265617465322063616c6c206661696c6564000000000000000000000000006044820152606490fd5b95620005f7936200039e620005b0620005fd94989a999795976200054d600090565b50620005636200055d8262000623565b62000420565b6200059662000590610259926200057d6020850162000280565b93808552620007016020860139620001d8565b6200046d565b90620005a160405190565b938492602084019283620004ab565b8051906020016000f597620005c589620001e3565b93600097889788978897620005ef620005e26200012a8b620004d3565b916001600160a01b031690565b1415620004de565b620006bc565b60208151910182885af114620006105750565b80fd5b620000c2620000c2620000c29290565b3b6200063862000634600062000613565b9190565b1190565b90826000939282370152565b9190620000a1816200066281620000ab9560209181520190565b80956200063c565b909391620000c295936200069e620006ae9262000697608086019860008701906001600160a01b03169052565b6020850152565b6001600160a01b03166040830152565b606081850391015262000648565b9193620000c293620006f09295620006d2606090565b5060405163e4d52aa760e01b6020820152968795602487016200066a565b602082018103825203826200025756fe608060405234610028576100196100146100c0565b6101a1565b604051608b6101ce8239608b90f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b0382111761006457604052565b61002d565b9061007d61007660405190565b9283610043565b565b6001600160a01b031690565b90565b6001600160a01b0381160361002857565b9050519061007d8261008e565b906020828203126100285761008b9161009f565b61008b610259803803806100d381610069565b9283398101906100ac565b61007f61008b61008b9290565b61008b906100de565b156100fb57565b60405162461bcd60e51b815260206004820152602260248201527f496e76616c69642073696e676c65746f6e20616464726573732070726f766964604482015261195960f21b6064820152608490fd5b61008b9061007f906001600160a01b031682565b61008b9061014b565b61008b9061015f565b9061018161008b61019d92610168565b82546001600160a01b0319166001600160a01b03919091161790565b9055565b61007d906101c66101b561007f60006100eb565b6001600160a01b03831614156100f4565b600061017156fe60806040526000805473ffffffffffffffffffffffffffffffffffffffff16903563530ca43760e11b14604c576000808092368280378136915af43d82803e146047573d6000f35b3d6000fd5b60005260206000f3fea264697066735822122080910b9407e55bea2fc5c4480d166cebd732618c84af8d8238f8c4ccc7d9955764736f6c63430008180033a2646970667358221220a7e4947857ef61a221b7336525f9f87bd79af5d7c03a1e1974802101603f37e364736f6c63430008180033","abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract FusionProxy","name":"proxy","type":"address"},{"indexed":false,"internalType":"address","name":"singleton","type":"address"}],"name":"ProxyCreation","type":"event"},{"inputs":[{"internalType":"bytes","name":"RegistryData","type":"bytes"},{"internalType":"address","name":"to","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"createProxyWithTxHash","outputs":[{"internalType":"contract FusionProxy","name":"proxy","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"proxyCreationCode","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"pure","type":"function"}]}